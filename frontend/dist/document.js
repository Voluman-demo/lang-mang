"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DocumentRequest_one_of_decls, _DocumentAddRequest_one_of_decls, _DocumentResponse_one_of_decls, _GetDocumentsResponse_one_of_decls, _DownloadFileRequest_one_of_decls, _DownloadFileResponse_one_of_decls, _CheckOutdatedDocumentsRequest_one_of_decls, _CheckOutdatedDocumentsResponse_one_of_decls, _Document_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentServiceClient = exports.UnimplementedDocumentServiceService = exports.Document = exports.CheckOutdatedDocumentsResponse = exports.CheckOutdatedDocumentsRequest = exports.DownloadFileResponse = exports.DownloadFileRequest = exports.GetDocumentsResponse = exports.DocumentResponse = exports.DocumentAddRequest = exports.DocumentRequest = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: document.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = __importStar(require("./google\\protobuf\\empty"));
const pb_1 = __importStar(require("google-protobuf"));
const grpc_1 = __importStar(require("@grpc/grpc-js"));
class DocumentRequest extends pb_1.Message {
    constructor(data) {
        super();
        _DocumentRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], __classPrivateFieldGet(this, _DocumentRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("languageCode" in data && data.languageCode != undefined) {
                this.languageCode = data.languageCode;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("fileName" in data && data.fileName != undefined) {
                this.fileName = data.fileName;
            }
            if ("fileContent" in data && data.fileContent != undefined) {
                this.fileContent = data.fileContent;
            }
        }
    }
    get languageCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set languageCode(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set type(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 3, []);
    }
    set version(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get fileName() {
        return pb_1.Message.getFieldWithDefault(this, 4, "");
    }
    set fileName(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get fileContent() {
        return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0));
    }
    set fileContent(value) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data) {
        const message = new DocumentRequest({});
        if (data.languageCode != null) {
            message.languageCode = data.languageCode;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.fileName != null) {
            message.fileName = data.fileName;
        }
        if (data.fileContent != null) {
            message.fileContent = data.fileContent;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.languageCode != null) {
            data.languageCode = this.languageCode;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.fileName != null) {
            data.fileName = this.fileName;
        }
        if (this.fileContent != null) {
            data.fileContent = this.fileContent;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.languageCode.length)
            writer.writeString(1, this.languageCode);
        if (this.type.length)
            writer.writeString(2, this.type);
        if (this.version.length)
            writer.writePackedInt32(3, this.version);
        if (this.fileName.length)
            writer.writeString(4, this.fileName);
        if (this.fileContent.length)
            writer.writeBytes(5, this.fileContent);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.languageCode = reader.readString();
                    break;
                case 2:
                    message.type = reader.readString();
                    break;
                case 3:
                    message.version = reader.readPackedInt32();
                    break;
                case 4:
                    message.fileName = reader.readString();
                    break;
                case 5:
                    message.fileContent = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return DocumentRequest.deserialize(bytes);
    }
}
exports.DocumentRequest = DocumentRequest;
_DocumentRequest_one_of_decls = new WeakMap();
class DocumentAddRequest extends pb_1.Message {
    constructor(data) {
        super();
        _DocumentAddRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _DocumentAddRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("languageCode" in data && data.languageCode != undefined) {
                this.languageCode = data.languageCode;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("fileName" in data && data.fileName != undefined) {
                this.fileName = data.fileName;
            }
            if ("fileContent" in data && data.fileContent != undefined) {
                this.fileContent = data.fileContent;
            }
        }
    }
    get languageCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set languageCode(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set type(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 3, "");
    }
    set version(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get fileName() {
        return pb_1.Message.getFieldWithDefault(this, 4, "");
    }
    set fileName(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get fileContent() {
        return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0));
    }
    set fileContent(value) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data) {
        const message = new DocumentAddRequest({});
        if (data.languageCode != null) {
            message.languageCode = data.languageCode;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.fileName != null) {
            message.fileName = data.fileName;
        }
        if (data.fileContent != null) {
            message.fileContent = data.fileContent;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.languageCode != null) {
            data.languageCode = this.languageCode;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.fileName != null) {
            data.fileName = this.fileName;
        }
        if (this.fileContent != null) {
            data.fileContent = this.fileContent;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.languageCode.length)
            writer.writeString(1, this.languageCode);
        if (this.type.length)
            writer.writeString(2, this.type);
        if (this.version.length)
            writer.writeString(3, this.version);
        if (this.fileName.length)
            writer.writeString(4, this.fileName);
        if (this.fileContent.length)
            writer.writeBytes(5, this.fileContent);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentAddRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.languageCode = reader.readString();
                    break;
                case 2:
                    message.type = reader.readString();
                    break;
                case 3:
                    message.version = reader.readString();
                    break;
                case 4:
                    message.fileName = reader.readString();
                    break;
                case 5:
                    message.fileContent = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return DocumentAddRequest.deserialize(bytes);
    }
}
exports.DocumentAddRequest = DocumentAddRequest;
_DocumentAddRequest_one_of_decls = new WeakMap();
class DocumentResponse extends pb_1.Message {
    constructor(data) {
        super();
        _DocumentResponse_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _DocumentResponse_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set message(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new DocumentResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return DocumentResponse.deserialize(bytes);
    }
}
exports.DocumentResponse = DocumentResponse;
_DocumentResponse_one_of_decls = new WeakMap();
class GetDocumentsResponse extends pb_1.Message {
    constructor(data) {
        super();
        _GetDocumentsResponse_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _GetDocumentsResponse_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("documents" in data && data.documents != undefined) {
                this.documents = data.documents;
            }
        }
    }
    get documents() {
        return pb_1.Message.getRepeatedWrapperField(this, Document, 1);
    }
    set documents(value) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data) {
        const message = new GetDocumentsResponse({});
        if (data.documents != null) {
            message.documents = data.documents.map(item => Document.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.documents != null) {
            data.documents = this.documents.map((item) => item.toObject());
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.documents.length)
            writer.writeRepeatedMessage(1, this.documents, (item) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDocumentsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.documents, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Document.deserialize(reader), Document));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return GetDocumentsResponse.deserialize(bytes);
    }
}
exports.GetDocumentsResponse = GetDocumentsResponse;
_GetDocumentsResponse_one_of_decls = new WeakMap();
class DownloadFileRequest extends pb_1.Message {
    constructor(data) {
        super();
        _DownloadFileRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _DownloadFileRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set filename(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new DownloadFileRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadFileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return DownloadFileRequest.deserialize(bytes);
    }
}
exports.DownloadFileRequest = DownloadFileRequest;
_DownloadFileRequest_one_of_decls = new WeakMap();
class DownloadFileResponse extends pb_1.Message {
    constructor(data) {
        super();
        _DownloadFileResponse_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _DownloadFileResponse_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("fileContent" in data && data.fileContent != undefined) {
                this.fileContent = data.fileContent;
            }
        }
    }
    get fileContent() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0));
    }
    set fileContent(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new DownloadFileResponse({});
        if (data.fileContent != null) {
            message.fileContent = data.fileContent;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.fileContent != null) {
            data.fileContent = this.fileContent;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.fileContent.length)
            writer.writeBytes(1, this.fileContent);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadFileResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.fileContent = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return DownloadFileResponse.deserialize(bytes);
    }
}
exports.DownloadFileResponse = DownloadFileResponse;
_DownloadFileResponse_one_of_decls = new WeakMap();
class CheckOutdatedDocumentsRequest extends pb_1.Message {
    constructor(data) {
        super();
        _CheckOutdatedDocumentsRequest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _CheckOutdatedDocumentsRequest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set type(value) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data) {
        const message = new CheckOutdatedDocumentsRequest({});
        if (data.type != null) {
            message.type = data.type;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.type != null) {
            data.type = this.type;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type.length)
            writer.writeString(1, this.type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckOutdatedDocumentsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return CheckOutdatedDocumentsRequest.deserialize(bytes);
    }
}
exports.CheckOutdatedDocumentsRequest = CheckOutdatedDocumentsRequest;
_CheckOutdatedDocumentsRequest_one_of_decls = new WeakMap();
class CheckOutdatedDocumentsResponse extends pb_1.Message {
    constructor(data) {
        super();
        _CheckOutdatedDocumentsResponse_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _CheckOutdatedDocumentsResponse_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("outdatedDocuments" in data && data.outdatedDocuments != undefined) {
                this.outdatedDocuments = data.outdatedDocuments;
            }
        }
    }
    get outdatedDocuments() {
        return pb_1.Message.getRepeatedWrapperField(this, Document, 1);
    }
    set outdatedDocuments(value) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data) {
        const message = new CheckOutdatedDocumentsResponse({});
        if (data.outdatedDocuments != null) {
            message.outdatedDocuments = data.outdatedDocuments.map(item => Document.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.outdatedDocuments != null) {
            data.outdatedDocuments = this.outdatedDocuments.map((item) => item.toObject());
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.outdatedDocuments.length)
            writer.writeRepeatedMessage(1, this.outdatedDocuments, (item) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckOutdatedDocumentsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.outdatedDocuments, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Document.deserialize(reader), Document));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return CheckOutdatedDocumentsResponse.deserialize(bytes);
    }
}
exports.CheckOutdatedDocumentsResponse = CheckOutdatedDocumentsResponse;
_CheckOutdatedDocumentsResponse_one_of_decls = new WeakMap();
class Document extends pb_1.Message {
    constructor(data) {
        super();
        _Document_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], __classPrivateFieldGet(this, _Document_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("languageCode" in data && data.languageCode != undefined) {
                this.languageCode = data.languageCode;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("filePath" in data && data.filePath != undefined) {
                this.filePath = data.filePath;
            }
        }
    }
    get languageCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set languageCode(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set type(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 3, []);
    }
    set version(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get filePath() {
        return pb_1.Message.getFieldWithDefault(this, 4, "");
    }
    set filePath(value) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data) {
        const message = new Document({});
        if (data.languageCode != null) {
            message.languageCode = data.languageCode;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.filePath != null) {
            message.filePath = data.filePath;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.languageCode != null) {
            data.languageCode = this.languageCode;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.filePath != null) {
            data.filePath = this.filePath;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.languageCode.length)
            writer.writeString(1, this.languageCode);
        if (this.type.length)
            writer.writeString(2, this.type);
        if (this.version.length)
            writer.writePackedInt32(3, this.version);
        if (this.filePath.length)
            writer.writeString(4, this.filePath);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Document();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.languageCode = reader.readString();
                    break;
                case 2:
                    message.type = reader.readString();
                    break;
                case 3:
                    message.version = reader.readPackedInt32();
                    break;
                case 4:
                    message.filePath = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return Document.deserialize(bytes);
    }
}
exports.Document = Document;
_Document_one_of_decls = new WeakMap();
class UnimplementedDocumentServiceService {
}
exports.UnimplementedDocumentServiceService = UnimplementedDocumentServiceService;
UnimplementedDocumentServiceService.definition = {
    AddDocument: {
        path: "/DocumentService/AddDocument",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => DocumentAddRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => DocumentResponse.deserialize(new Uint8Array(bytes))
    },
    GetAllDocuments: {
        path: "/DocumentService/GetAllDocuments",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => GetDocumentsResponse.deserialize(new Uint8Array(bytes))
    },
    DownloadFile: {
        path: "/DocumentService/DownloadFile",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => DownloadFileRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => DownloadFileResponse.deserialize(new Uint8Array(bytes))
    },
    CheckOutdatedDocuments: {
        path: "/DocumentService/CheckOutdatedDocuments",
        requestStream: false,
        responseStream: false,
        requestSerialize: (message) => Buffer.from(message.serialize()),
        requestDeserialize: (bytes) => CheckOutdatedDocumentsRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message) => Buffer.from(message.serialize()),
        responseDeserialize: (bytes) => CheckOutdatedDocumentsResponse.deserialize(new Uint8Array(bytes))
    }
};
class DocumentServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedDocumentServiceService.definition, "DocumentService", {}) {
    constructor(address, credentials, options) {
        super(address, credentials, options);
        this.AddDocument = (message, metadata, options, callback) => {
            return super.AddDocument(message, metadata, options, callback);
        };
        this.GetAllDocuments = (message, metadata, options, callback) => {
            return super.GetAllDocuments(message, metadata, options, callback);
        };
        this.DownloadFile = (message, metadata, options, callback) => {
            return super.DownloadFile(message, metadata, options, callback);
        };
        this.CheckOutdatedDocuments = (message, metadata, options, callback) => {
            return super.CheckOutdatedDocuments(message, metadata, options, callback);
        };
    }
}
exports.DocumentServiceClient = DocumentServiceClient;
