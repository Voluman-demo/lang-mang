/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: document.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\protobuf\\empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class DocumentRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        languageCode?: string;
        type?: string;
        version?: number[];
        fileName?: string;
        fileContent?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("languageCode" in data && data.languageCode != undefined) {
                this.languageCode = data.languageCode;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("fileName" in data && data.fileName != undefined) {
                this.fileName = data.fileName;
            }
            if ("fileContent" in data && data.fileContent != undefined) {
                this.fileContent = data.fileContent;
            }
        }
    }
    get languageCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set languageCode(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set version(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get fileName() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set fileName(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get fileContent() {
        return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
    }
    set fileContent(value: Uint8Array) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        languageCode?: string;
        type?: string;
        version?: number[];
        fileName?: string;
        fileContent?: Uint8Array;
    }): DocumentRequest {
        const message = new DocumentRequest({});
        if (data.languageCode != null) {
            message.languageCode = data.languageCode;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.fileName != null) {
            message.fileName = data.fileName;
        }
        if (data.fileContent != null) {
            message.fileContent = data.fileContent;
        }
        return message;
    }
    toObject() {
        const data: {
            languageCode?: string;
            type?: string;
            version?: number[];
            fileName?: string;
            fileContent?: Uint8Array;
        } = {};
        if (this.languageCode != null) {
            data.languageCode = this.languageCode;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.fileName != null) {
            data.fileName = this.fileName;
        }
        if (this.fileContent != null) {
            data.fileContent = this.fileContent;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.languageCode.length)
            writer.writeString(1, this.languageCode);
        if (this.type.length)
            writer.writeString(2, this.type);
        if (this.version.length)
            writer.writePackedInt32(3, this.version);
        if (this.fileName.length)
            writer.writeString(4, this.fileName);
        if (this.fileContent.length)
            writer.writeBytes(5, this.fileContent);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DocumentRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.languageCode = reader.readString();
                    break;
                case 2:
                    message.type = reader.readString();
                    break;
                case 3:
                    message.version = reader.readPackedInt32();
                    break;
                case 4:
                    message.fileName = reader.readString();
                    break;
                case 5:
                    message.fileContent = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DocumentRequest {
        return DocumentRequest.deserialize(bytes);
    }
}
export class DocumentAddRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        languageCode?: string;
        type?: string;
        version?: string;
        fileName?: string;
        fileContent?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("languageCode" in data && data.languageCode != undefined) {
                this.languageCode = data.languageCode;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("fileName" in data && data.fileName != undefined) {
                this.fileName = data.fileName;
            }
            if ("fileContent" in data && data.fileContent != undefined) {
                this.fileContent = data.fileContent;
            }
        }
    }
    get languageCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set languageCode(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set version(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get fileName() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set fileName(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get fileContent() {
        return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
    }
    set fileContent(value: Uint8Array) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        languageCode?: string;
        type?: string;
        version?: string;
        fileName?: string;
        fileContent?: Uint8Array;
    }): DocumentAddRequest {
        const message = new DocumentAddRequest({});
        if (data.languageCode != null) {
            message.languageCode = data.languageCode;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.fileName != null) {
            message.fileName = data.fileName;
        }
        if (data.fileContent != null) {
            message.fileContent = data.fileContent;
        }
        return message;
    }
    toObject() {
        const data: {
            languageCode?: string;
            type?: string;
            version?: string;
            fileName?: string;
            fileContent?: Uint8Array;
        } = {};
        if (this.languageCode != null) {
            data.languageCode = this.languageCode;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.fileName != null) {
            data.fileName = this.fileName;
        }
        if (this.fileContent != null) {
            data.fileContent = this.fileContent;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.languageCode.length)
            writer.writeString(1, this.languageCode);
        if (this.type.length)
            writer.writeString(2, this.type);
        if (this.version.length)
            writer.writeString(3, this.version);
        if (this.fileName.length)
            writer.writeString(4, this.fileName);
        if (this.fileContent.length)
            writer.writeBytes(5, this.fileContent);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DocumentAddRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentAddRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.languageCode = reader.readString();
                    break;
                case 2:
                    message.type = reader.readString();
                    break;
                case 3:
                    message.version = reader.readString();
                    break;
                case 4:
                    message.fileName = reader.readString();
                    break;
                case 5:
                    message.fileContent = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DocumentAddRequest {
        return DocumentAddRequest.deserialize(bytes);
    }
}
export class DocumentResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): DocumentResponse {
        const message = new DocumentResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DocumentResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DocumentResponse {
        return DocumentResponse.deserialize(bytes);
    }
}
export class GetDocumentsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        documents?: Document[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("documents" in data && data.documents != undefined) {
                this.documents = data.documents;
            }
        }
    }
    get documents() {
        return pb_1.Message.getRepeatedWrapperField(this, Document, 1) as Document[];
    }
    set documents(value: Document[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        documents?: ReturnType<typeof Document.prototype.toObject>[];
    }): GetDocumentsResponse {
        const message = new GetDocumentsResponse({});
        if (data.documents != null) {
            message.documents = data.documents.map(item => Document.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            documents?: ReturnType<typeof Document.prototype.toObject>[];
        } = {};
        if (this.documents != null) {
            data.documents = this.documents.map((item: Document) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.documents.length)
            writer.writeRepeatedMessage(1, this.documents, (item: Document) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDocumentsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDocumentsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.documents, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Document.deserialize(reader), Document));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetDocumentsResponse {
        return GetDocumentsResponse.deserialize(bytes);
    }
}
export class DownloadFileRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        filename?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("filename" in data && data.filename != undefined) {
                this.filename = data.filename;
            }
        }
    }
    get filename() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set filename(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        filename?: string;
    }): DownloadFileRequest {
        const message = new DownloadFileRequest({});
        if (data.filename != null) {
            message.filename = data.filename;
        }
        return message;
    }
    toObject() {
        const data: {
            filename?: string;
        } = {};
        if (this.filename != null) {
            data.filename = this.filename;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.filename.length)
            writer.writeString(1, this.filename);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadFileRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadFileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.filename = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DownloadFileRequest {
        return DownloadFileRequest.deserialize(bytes);
    }
}
export class DownloadFileResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        fileContent?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("fileContent" in data && data.fileContent != undefined) {
                this.fileContent = data.fileContent;
            }
        }
    }
    get fileContent() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
    }
    set fileContent(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        fileContent?: Uint8Array;
    }): DownloadFileResponse {
        const message = new DownloadFileResponse({});
        if (data.fileContent != null) {
            message.fileContent = data.fileContent;
        }
        return message;
    }
    toObject() {
        const data: {
            fileContent?: Uint8Array;
        } = {};
        if (this.fileContent != null) {
            data.fileContent = this.fileContent;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.fileContent.length)
            writer.writeBytes(1, this.fileContent);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadFileResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadFileResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.fileContent = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DownloadFileResponse {
        return DownloadFileResponse.deserialize(bytes);
    }
}
export class CheckOutdatedDocumentsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        type?: string;
    }): CheckOutdatedDocumentsRequest {
        const message = new CheckOutdatedDocumentsRequest({});
        if (data.type != null) {
            message.type = data.type;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: string;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type.length)
            writer.writeString(1, this.type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckOutdatedDocumentsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckOutdatedDocumentsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CheckOutdatedDocumentsRequest {
        return CheckOutdatedDocumentsRequest.deserialize(bytes);
    }
}
export class CheckOutdatedDocumentsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        outdatedDocuments?: Document[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("outdatedDocuments" in data && data.outdatedDocuments != undefined) {
                this.outdatedDocuments = data.outdatedDocuments;
            }
        }
    }
    get outdatedDocuments() {
        return pb_1.Message.getRepeatedWrapperField(this, Document, 1) as Document[];
    }
    set outdatedDocuments(value: Document[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        outdatedDocuments?: ReturnType<typeof Document.prototype.toObject>[];
    }): CheckOutdatedDocumentsResponse {
        const message = new CheckOutdatedDocumentsResponse({});
        if (data.outdatedDocuments != null) {
            message.outdatedDocuments = data.outdatedDocuments.map(item => Document.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            outdatedDocuments?: ReturnType<typeof Document.prototype.toObject>[];
        } = {};
        if (this.outdatedDocuments != null) {
            data.outdatedDocuments = this.outdatedDocuments.map((item: Document) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.outdatedDocuments.length)
            writer.writeRepeatedMessage(1, this.outdatedDocuments, (item: Document) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckOutdatedDocumentsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckOutdatedDocumentsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.outdatedDocuments, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Document.deserialize(reader), Document));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CheckOutdatedDocumentsResponse {
        return CheckOutdatedDocumentsResponse.deserialize(bytes);
    }
}
export class Document extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        languageCode?: string;
        type?: string;
        version?: number[];
        filePath?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("languageCode" in data && data.languageCode != undefined) {
                this.languageCode = data.languageCode;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("filePath" in data && data.filePath != undefined) {
                this.filePath = data.filePath;
            }
        }
    }
    get languageCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set languageCode(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set version(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get filePath() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set filePath(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        languageCode?: string;
        type?: string;
        version?: number[];
        filePath?: string;
    }): Document {
        const message = new Document({});
        if (data.languageCode != null) {
            message.languageCode = data.languageCode;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.filePath != null) {
            message.filePath = data.filePath;
        }
        return message;
    }
    toObject() {
        const data: {
            languageCode?: string;
            type?: string;
            version?: number[];
            filePath?: string;
        } = {};
        if (this.languageCode != null) {
            data.languageCode = this.languageCode;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.filePath != null) {
            data.filePath = this.filePath;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.languageCode.length)
            writer.writeString(1, this.languageCode);
        if (this.type.length)
            writer.writeString(2, this.type);
        if (this.version.length)
            writer.writePackedInt32(3, this.version);
        if (this.filePath.length)
            writer.writeString(4, this.filePath);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Document {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Document();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.languageCode = reader.readString();
                    break;
                case 2:
                    message.type = reader.readString();
                    break;
                case 3:
                    message.version = reader.readPackedInt32();
                    break;
                case 4:
                    message.filePath = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Document {
        return Document.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedDocumentServiceService {
    static definition = {
        AddDocument: {
            path: "/DocumentService/AddDocument",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DocumentAddRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DocumentAddRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DocumentResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DocumentResponse.deserialize(new Uint8Array(bytes))
        },
        GetAllDocuments: {
            path: "/DocumentService/GetAllDocuments",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetDocumentsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetDocumentsResponse.deserialize(new Uint8Array(bytes))
        },
        DownloadFile: {
            path: "/DocumentService/DownloadFile",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DownloadFileRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DownloadFileRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DownloadFileResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DownloadFileResponse.deserialize(new Uint8Array(bytes))
        },
        CheckOutdatedDocuments: {
            path: "/DocumentService/CheckOutdatedDocuments",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CheckOutdatedDocumentsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CheckOutdatedDocumentsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CheckOutdatedDocumentsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CheckOutdatedDocumentsResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract AddDocument(call: grpc_1.ServerUnaryCall<DocumentAddRequest, DocumentResponse>, callback: grpc_1.sendUnaryData<DocumentResponse>): void;
    abstract GetAllDocuments(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetDocumentsResponse>, callback: grpc_1.sendUnaryData<GetDocumentsResponse>): void;
    abstract DownloadFile(call: grpc_1.ServerUnaryCall<DownloadFileRequest, DownloadFileResponse>, callback: grpc_1.sendUnaryData<DownloadFileResponse>): void;
    abstract CheckOutdatedDocuments(call: grpc_1.ServerUnaryCall<CheckOutdatedDocumentsRequest, CheckOutdatedDocumentsResponse>, callback: grpc_1.sendUnaryData<CheckOutdatedDocumentsResponse>): void;
}
export class DocumentServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedDocumentServiceService.definition, "DocumentService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    AddDocument: GrpcUnaryServiceInterface<DocumentAddRequest, DocumentResponse> = (message: DocumentAddRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DocumentResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DocumentResponse>, callback?: grpc_1.requestCallback<DocumentResponse>): grpc_1.ClientUnaryCall => {
        return super.AddDocument(message, metadata, options, callback);
    };
    GetAllDocuments: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetDocumentsResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetDocumentsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetDocumentsResponse>, callback?: grpc_1.requestCallback<GetDocumentsResponse>): grpc_1.ClientUnaryCall => {
        return super.GetAllDocuments(message, metadata, options, callback);
    };
    DownloadFile: GrpcUnaryServiceInterface<DownloadFileRequest, DownloadFileResponse> = (message: DownloadFileRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DownloadFileResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DownloadFileResponse>, callback?: grpc_1.requestCallback<DownloadFileResponse>): grpc_1.ClientUnaryCall => {
        return super.DownloadFile(message, metadata, options, callback);
    };
    CheckOutdatedDocuments: GrpcUnaryServiceInterface<CheckOutdatedDocumentsRequest, CheckOutdatedDocumentsResponse> = (message: CheckOutdatedDocumentsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckOutdatedDocumentsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckOutdatedDocumentsResponse>, callback?: grpc_1.requestCallback<CheckOutdatedDocumentsResponse>): grpc_1.ClientUnaryCall => {
        return super.CheckOutdatedDocuments(message, metadata, options, callback);
    };
}
