/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: language.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class Empty extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Empty {
        const message = new Empty({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Empty {
        return Empty.deserialize(bytes);
    }
}
export class LanguageRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        code?: string;
    }): LanguageRequest {
        const message = new LanguageRequest({});
        if (data.code != null) {
            message.code = data.code;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code.length)
            writer.writeString(1, this.code);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LanguageRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LanguageRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LanguageRequest {
        return LanguageRequest.deserialize(bytes);
    }
}
export class Language extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        code?: string;
    }): Language {
        const message = new Language({});
        if (data.code != null) {
            message.code = data.code;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code.length)
            writer.writeString(1, this.code);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Language {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Language();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Language {
        return Language.deserialize(bytes);
    }
}
export class LanguageList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        languages?: Language[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("languages" in data && data.languages != undefined) {
                this.languages = data.languages;
            }
        }
    }
    get languages() {
        return pb_1.Message.getRepeatedWrapperField(this, Language, 1) as Language[];
    }
    set languages(value: Language[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        languages?: ReturnType<typeof Language.prototype.toObject>[];
    }): LanguageList {
        const message = new LanguageList({});
        if (data.languages != null) {
            message.languages = data.languages.map(item => Language.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            languages?: ReturnType<typeof Language.prototype.toObject>[];
        } = {};
        if (this.languages != null) {
            data.languages = this.languages.map((item: Language) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.languages.length)
            writer.writeRepeatedMessage(1, this.languages, (item: Language) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LanguageList {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LanguageList();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.languages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Language.deserialize(reader), Language));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LanguageList {
        return LanguageList.deserialize(bytes);
    }
}
export class Response extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get success() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set success(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        message?: string;
        success?: boolean;
    }): Response {
        const message = new Response({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.success != null) {
            message.success = data.success;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            success?: boolean;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.success != null) {
            data.success = this.success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.success != false)
            writer.writeBool(2, this.success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    message.success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Response {
        return Response.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedLanguageServiceService {
    static definition = {
        GetAllLanguages: {
            path: "/LanguageService/GetAllLanguages",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: Empty) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LanguageList) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LanguageList.deserialize(new Uint8Array(bytes))
        },
        AddLanguage: {
            path: "/LanguageService/AddLanguage",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LanguageRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LanguageRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Response) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
        },
        RemoveLanguage: {
            path: "/LanguageService/RemoveLanguage",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LanguageRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LanguageRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Response) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
        },
        ClearLanguages: {
            path: "/LanguageService/ClearLanguages",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: Empty) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Response) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract GetAllLanguages(call: grpc_1.ServerUnaryCall<Empty, LanguageList>, callback: grpc_1.sendUnaryData<LanguageList>): void;
    abstract AddLanguage(call: grpc_1.ServerUnaryCall<LanguageRequest, Response>, callback: grpc_1.sendUnaryData<Response>): void;
    abstract RemoveLanguage(call: grpc_1.ServerUnaryCall<LanguageRequest, Response>, callback: grpc_1.sendUnaryData<Response>): void;
    abstract ClearLanguages(call: grpc_1.ServerUnaryCall<Empty, Response>, callback: grpc_1.sendUnaryData<Response>): void;
}
export class LanguageServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedLanguageServiceService.definition, "LanguageService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    GetAllLanguages: GrpcUnaryServiceInterface<Empty, LanguageList> = (message: Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LanguageList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LanguageList>, callback?: grpc_1.requestCallback<LanguageList>): grpc_1.ClientUnaryCall => {
        return super.GetAllLanguages(message, metadata, options, callback);
    };
    AddLanguage: GrpcUnaryServiceInterface<LanguageRequest, Response> = (message: LanguageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
        return super.AddLanguage(message, metadata, options, callback);
    };
    RemoveLanguage: GrpcUnaryServiceInterface<LanguageRequest, Response> = (message: LanguageRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
        return super.RemoveLanguage(message, metadata, options, callback);
    };
    ClearLanguages: GrpcUnaryServiceInterface<Empty, Response> = (message: Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
        return super.ClearLanguages(message, metadata, options, callback);
    };
}
